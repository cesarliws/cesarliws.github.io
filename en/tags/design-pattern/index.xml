<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>

    <title>@cesarliws’s cooking bytes - Design Pattern</title>
    <link>https://cesarliws.github.io/en/tags/design-pattern/</link>
    <description>All entries in Design Pattern on cooking bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    
    <copyright>Everything is mine</copyright>
    <lastBuildDate>Sat, 22 Apr 2017 14:41:40 -0300</lastBuildDate>
    <atom:link href="/en/tags/design-pattern/" rel="self" type="application/rss+xml" />
    
      
      <item>
        <title>Delphi Defer</title>
        <link>https://cesarliws.github.io/en/posts/delphi-defer/</link>
        <pubDate>Sat, 22 Apr 2017 14:41:40 -0300</pubDate>
        <author> (Cesar Romero)</author>
        <guid>https://cesarliws.github.io/en/posts/delphi-defer/</guid>
        <description>

&lt;p&gt;&lt;a href=&#34;https://cesarliws.github.io/posts/delphi-defer/&#34;&gt;Versão deste artigo em Português&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few weeks ago I was refactoring my framework &amp;ldquo;Foundation 4 Delphi&amp;rdquo;, I had to extend the TComponent.TRecursiveEnumerator to be used in other classes, it was a very old implementation and I decided to rewrite with generics and take advantage of smart records to simplify the integration with my TComponentHelper class helper.&lt;/p&gt;

&lt;p&gt;In the record’s implementation, I had to create a “IInterface” field just to be able to simulate a destructor in the record, when I thought how great would be if we had the &lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34; target=&#34;_blank&#34;&gt;Defer&lt;/a&gt; function as in Golang. When I was writing the unit tests, I felt again the need for Defer, so I decided to think more about the pattern and behavior of Defer, which led me to try to implement it in Delphi just as a logic exercise, even thinking that it would not be something useful for production, but in the end of the day, I got something very useful.&lt;/p&gt;

&lt;h2 id=&#34;what-is-defer&#34;&gt;What is Defer?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cesarliws.github.io/img/postponed.jpg&#34; alt=&#34;Postpone image&#34; /&gt; Defer defines the “postpone procedure” pattern, this postpone should schedule a “procedure: TProc” to run it after the end of the caller method that executed the call to the Defer function (Proc: TProc).&lt;/p&gt;

&lt;p&gt;At the end of the caller method, Defer must execute all stacked procedures in the reverse order in which they were scheduled.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34; target=&#34;_blank&#34;&gt;Defer according to the Golang documentation &lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Go&amp;rsquo;s defer statement schedules a function call (the deferred function) to be run immediately before the function executing the defer returns. It&amp;rsquo;s an unusual but effective way to deal with situations such as resources that must be released regardless of which path a function takes to return. The canonical examples are unlocking a mutex or closing a file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is important to know that Golang is a language with garbage collection, so it is not necessary to destroy the created objects, only to deallocate resources.&lt;/p&gt;

&lt;p&gt;And regardless of the executed flow in the function, Defer should always execute the already scheduled methods, so if there is an Exit before the end or if an exception occurs, all the scheduled methods must be executed.&lt;/p&gt;

&lt;p&gt;In my research, I discovered that Defer was implemented for Apple&amp;rsquo;s Swift, version 2.0. You can read more about that in this article with a nice title &amp;ldquo;try / finally done right&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/new-syntax-swift-2-defer&#34; target=&#34;_blank&#34;&gt;The defer keyword in Swift 2: try/finally done right&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also read on reddit that this feature exists in D language, but I haven&amp;rsquo;t found any references.&lt;/p&gt;

&lt;h3 id=&#34;some-uses-for-defer&#34;&gt;Some uses for Defer&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Closing database connection, transaction, or query&lt;/li&gt;
&lt;li&gt;Closing socket connection&lt;/li&gt;
&lt;li&gt;Closing opened files&lt;/li&gt;
&lt;li&gt;Unlocking critical section/mutex&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-implementation&#34;&gt;The Implementation&lt;/h2&gt;

&lt;p&gt;After understanding how a Defer implementation should work, I implemented it using Interfaces, in this way the object would be automatically deallocated in the &amp;ldquo;end&amp;rdquo; statement of the caller method.&lt;/p&gt;

&lt;pre&gt;
  IDeferrer = Interface(IInterface)
    function Defer(Proc: TProc): IDeferrer;
  end;
&lt;/pre&gt;

&lt;p&gt;I followed the Golang standard for naming interfaces, adding the suffix &amp;ldquo;er&amp;rdquo;. This pattern differs from what we usually see in Delphi, add the suffix &amp;ldquo;able&amp;rdquo;, like in &amp;ldquo;Deferrable&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Internally, it has a stack with the scheduled TProc list, these methods will be executed when the TDefer object is destroyed, in the reverse order in which they were scheduled. Delphi already have a TStack&amp;lt;T&amp;gt; implementation in System.Generics.Collections, I just had to decorate TProc with a TStackItem record before storing.&lt;/p&gt;

&lt;pre&gt;
type
  TDeferrer = class(TInterfacedObject, IDeferrer)
  strict private
    type
      TStackItem = record
        Proc: TProc;
      end;
  strict private
    FStack: TStack&lt; TStackItem &gt;;
    procedure Push(Proc: TProc);
    procedure ProcessStack;
  public
    constructor Create; overload;
    constructor Create(Proc: TProc); overload;
    destructor Destroy; override;
    function Defer(Proc: TProc): IDeferrer;
  end;
&lt;/pre&gt;

&lt;p&gt;To finish, I created a global function that returns the created instance already storing the first method:&lt;/p&gt;

&lt;pre&gt;
function Defer(Proc: TProc): IDeferrer;
begin
  Result := TDeferrer.Create(Proc);
end;
&lt;/pre&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;The purpose of Defer is to defer methods execution, it not to manage the lifetime of objects, but as in Delphi Win32/Win64 objects are manually managed, we can use Defer to destroy objects, as well to finalize other resources.&lt;/p&gt;

&lt;pre&gt;
uses
  Foundation.System;
var
  Database: TDatabase;
  Exec: IDeferrer;
  Query: TQuery;
  Transaction: TTransaction;
begin
  Database := TDatabase.Create(FWriter);
  Exec := Defer(Database.Free);

  Database.Open(&#39;foundation-db&#39;);
  Exec.Defer(Database.Close);
  
  Transaction := Database.StartTransaction;
  Exec.Defer(Transaction.Free);
  Exec.Defer(Transaction.Commit);
  
  Query := Transaction.Query;
  Exec.Defer(Query.Free);
  
  if Query.Open(&#39;select value from table&#39;) then
  begin
    Exec.Defer(Query.Close);
  end;
end;
&lt;/pre&gt; 

&lt;p&gt;This code is part of the unit tests. The objects are just Mock, the FWriter object passed in the constructor is used to write the steps so the results can be validated, this was the way I found to create tests for Defer, as it will only run when being destroyed.&lt;/p&gt;

&lt;p&gt;This is the case test log used to check the results:&lt;/p&gt;

&lt;pre&gt;
  TDatabase.Open(&#39;foundation-db&#39;)
  TDatabase.StartTransaction
  TTransaction.Query
  TQuery.Create
  TQuery.Open(&#39;select value from table&#39;)

&gt; &#34;Defer execution starts here&#34;

  TQuery.Close 
  TQuery.Free
  TTransaction.Commit
  TTransaction.Free
  TDatabase.Close
  TDatabase.Free
&lt;/pre&gt; 

&lt;p&gt;Note that Defer happens only after TQuery.Open, exactly in the reverse order in which the methods were scheduled in Defer.&lt;/p&gt;

&lt;p&gt;Another detail is the declaration of the &amp;ldquo;Exec: IDeferrer&amp;rdquo; variable to have only one instance. Declaring the variable is not required, and the code will be cleaner with just a small overhead.&lt;/p&gt;

&lt;p&gt;If the IDeferrer reference is not stored in a local variable, a new instance is created for each Defer call. That would be a problem if the order in which the instances are deallocated was not the same as Defer, but the behavior was consistent across all tests. I assume it is the default behavior of &lt;a href=&#34;https://github.com/pleriche/FastMM4&#34; target=&#34;_blank&#34;&gt;FastMM&lt;/a&gt;, the Delphi default memory manager, to store the allocated instances in a stack, so the order to deallocate is the same as we need for Defer&amp;rsquo;s implementation. If your project memory manager is another one like &lt;a href=&#34;https://github.com/andremussche/scalemm/tree/version2&#34; target=&#34;_blank&#34;&gt;ScaleMM&lt;/a&gt; or &lt;a href=&#34;https://www.nexusdb.com/support/index.php?q=node/522&#34; target=&#34;_blank&#34;&gt;Nexus Memory Manager&lt;/a&gt; I suggest doing tests before using Defer, although I assume this should be the default behaviour for deallocating resources.&lt;/p&gt;

&lt;h3 id=&#34;an-alternative-implementation&#34;&gt;An alternative implementation&lt;/h3&gt;

&lt;p&gt;In the Experimental folder of the repository there is an alternate implementation that extends the Defer in the &lt;a href=&#34;https://github.com/cesarliws/foundation-4-delphi/blob/master/Experimental/Foundation.Pattern.Defer.Auto.pas&#34; target=&#34;_blank&#34;&gt;Foundation.Pattern.Defer.Auto&lt;/a&gt; unit.&lt;/p&gt;

&lt;p&gt;This implementation captures the thread id and caller method pointer to be used as the key to save the Defer instance in a TDictionary&amp;lt;string, IDeferrer&amp;gt; to always reuse the same instance. I have successfully tested this implementation on Win32, Win64 and in single and multi thread.&lt;/p&gt;

&lt;p&gt;To capture the caller method reference, the &lt;a href=&#34;https://github.com/project-jedi/jcl/blob/master/jcl/source/windows/JclDebug.pas&#34; target=&#34;_blank&#34;&gt;JclDebug&lt;/a&gt; unit from the Jedi Jcl project is used. For win32 I managed to extract only the necessary lines of code to the &lt;a href=&#34;https://github.com/cesarliws/foundation-4-delphi/blob/master/Experimental/Foundation.Vendor.JclDebug.pas&#34; target=&#34;_blank&#34;&gt;Foundation.Vendor.JclDebug&lt;/a&gt; unit, just to make easy to test, along with the author’s credits and license. For production and Win64, I recommend you to use the latest JclDebug unit.&lt;/p&gt;

&lt;p&gt;The advantage is clear, only one instance of Defer is created for each caller method, on the other hand the overhead generated from the implementation of the list using the TDictionary class, the mutex needed to ensure good multi-thread behavior and Jcl dependency, they are bigger than just declaring a variable or having more than one instance of the Defer method caller. Assuming that in common applications, there will not be many instances at the same time.&lt;/p&gt;

&lt;h3 id=&#34;more-examples&#34;&gt;More examples&lt;/h3&gt;

&lt;h4 id=&#34;anonymous-methods&#34;&gt;Anonymous methods&lt;/h4&gt;

&lt;pre&gt;
  Database := TDatabase.Create(FWriter);
  Database.Open(&#39;database-name&#39;);
  Defer(
    procedure
    begin
      Database.Close;
      Database.Free;
    end
  );
&lt;/pre&gt; 

&lt;h4 id=&#34;method-tracer&#34;&gt;Method tracer&lt;/h4&gt;

&lt;pre&gt;
class function TTrace.Method(Writer: TStringsWriter; const MethodName: string; var TraceProc: ITracer): IDeferrer;
var
  {! Workaround &#34;Defer(ITracer.Exit)&#34; : E2010 Incompatible types: &#39;TProc&#39; and &#39;procedure, untyped pointer or untyped parameter&#39; }
  Trace: TTrace;
begin
  Trace := TTrace.Create(Writer);
  Trace.Enter(MethodName);
  Result := Defer(Trace.Exit);
  Supports(Trace, ITracer, TraceProc)
end;

var
  Trace: ITracer;
begin
  TTrace.Method(FWriter, &#39;DelegateDeferToTraceExecute&#39;, Trace);
  Trace.Step(&#39;First&#39;);
  Trace.Step(&#39;Second&#39;);
  Trace.Step(&#39;Third&#39;);
end;
&lt;/pre&gt; 

&lt;p&gt;The tracer&amp;rsquo;s output log:&lt;/p&gt;

&lt;pre&gt;
    &gt; Enter DelegateDeferToTraceExecute
        1. DelegateDeferToTraceExecute: First
        2. DelegateDeferToTraceExecute: Second
        3. DelegateDeferToTraceExecute: Third
    &lt; Exit DelegateDeferToTraceExecute
&lt;/pre&gt; 

&lt;h4 id=&#34;conditional-finalization-in-anonymous-method&#34;&gt;Conditional finalization in anonymous method&lt;/h4&gt;

&lt;pre&gt;
Defer(
  procedure(
    if Datatabase.InTransaction then
    begin
      if Object.IsValid then
          Datatabase.Commit
      else
          Datatabase.RollBack;
    end;
  )
);
&lt;/pre&gt; 

&lt;h4 id=&#34;handling-exceptions&#34;&gt;Handling exceptions&lt;/h4&gt;

&lt;pre&gt;
Defer(
  procedure(
    try
      Connection.Close;
    except 
      on E: Exception do
        Log.Write(E); 
    end;

    Connection.Free;
  )
);
&lt;/pre&gt; 
  

&lt;h4 id=&#34;defer-as-a-record-destructor&#34;&gt;Defer as a record destructor&lt;/h4&gt;

&lt;pre&gt;
type
  TValueType&lt; T &gt; = record
  private
    FAnyObject: TAnyObject;
    FDeferrer: IDeferrer;
    FValue: T;
  public
    constructor Create(Value: T);
  end;  

constructor TValueType&lt; T &gt;.Create(Value: T);
begin
  FValue := Value;
  FAnyObject := TAnyObject.Create
  FDeferrer  := Defer(FAnyObject.Free);
end;
&lt;/pre&gt; 

&lt;h2 id=&#34;advantages&#34;&gt;Advantages&lt;/h2&gt;

&lt;p&gt;Delaying the execution of procedures has some advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ensures that you will not forget to finalize a resource, a very common error while doing code maintenance and new conditions are added creating a new flow.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The finalization code is next to the initialization code, which is more readable than putting at the end of the method;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No need for try/finally blocks to ensure that a resource is finalized.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Even if an exception occurs, all scheduled methods will be executed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Defer adds a small overhead by the created &amp;ldquo;Defer&amp;rdquo; object, the finalization will accumulate the execution of procedures, code that should be executed anyway. I consider that not being a high performance code, the use of defer brings more advantages than disadvantages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Avoid using defer inside loops, if it is necessary to allocate and deallocate resources within a loop, the deallocation must be deterministic. Excessive usage can greatly increase memory consumption and cause slowness.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When using with anonymous methods keep in mind that the state is captured, any variable used will have the value captured at the time the defer is declared and not the value changed during the procedure flow. Read more in &lt;a href=&#34;https://community.embarcadero.com/blogs/entry/understanding-anonymous-methods-37828&#34; target=&#34;_blank&#34;&gt;Understanding Anonymous Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This project was inspired by Golang &lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34; target=&#34;_blank&#34;&gt;Defer&lt;/a&gt; function and has no relation to  &amp;ldquo;Deferred/Promise&amp;rdquo; and &amp;ldquo;Deferred Choice&amp;rdquo; patterns.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cesarliws/foundation-4-delphi&#34; target=&#34;_blank&#34;&gt;Foundation 4 Delphi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project is hosted on github, I will make another post just to talk about the framework and what I am preparing for it. A lot is ready and in production, you can expect news soon.&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>
