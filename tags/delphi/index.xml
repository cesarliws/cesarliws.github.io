<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>

    <title>@cesarliws’s cooking bytes - Delphi</title>
    <link>https://cesarliws.github.io/tags/delphi/</link>
    <description>All entries in Delphi on cooking bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    
    <copyright>Everything is mine</copyright>
    <lastBuildDate>Wed, 05 Apr 2017 17:02:27 -0300</lastBuildDate>
    <atom:link href="/tags/delphi/" rel="self" type="application/rss+xml" />
    
      
      <item>
        <title>Delphi Defer</title>
        <link>https://cesarliws.github.io/posts/delphi-defer/</link>
        <pubDate>Wed, 05 Apr 2017 17:02:27 -0300</pubDate>
        <author> (Cesar Romero)</author>
        <guid>https://cesarliws.github.io/posts/delphi-defer/</guid>
        <description>

&lt;p&gt;&lt;a href=&#34;https://cesarliws.github.io/en/posts/delphi-defer&#34;&gt;English version of this post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Há algumas semanas eu estava refatorando o framework &amp;ldquo;Foundation 4 Delphi&amp;rdquo;, pois precisava extender o TComponent.TRecursiveEnumerator para utilizar em outras classes, era uma implementação antiga e resolvi reescrever com generics e aproveitar a vantagem dos smart records para simplificar a integração com o meu TComponentHelper class helper.&lt;/p&gt;

&lt;p&gt;Na implementação do record, precisei criar um field &amp;ldquo;IInterface&amp;rdquo; apenas para poder simular um destructor no record, foi quando eu pensei como seria bom se tivessemos o &lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34; target=&#34;_blank&#34;&gt;Defer&lt;/a&gt; do Golang. Quando estava escrevendo os testes unitários, novamente senti a necessidade do Defer, foi quando decidi pensar mais no padrão e comportamento do Defer, o que me levou a tentar implementar em Delphi, apenas para um exercício de lógica, mesmo inicialmente achando que não seria algo útil para produção, mas para a minha surpresa, consegui algo muito útil.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-defer&#34;&gt;O que é Defer?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://cesarliws.github.io/img/postponed.jpg&#34; alt=&#34;Postpone image&#34; /&gt; Defer define o padrão &amp;ldquo;adiar a execução de uma procedure&amp;rdquo;, este adiamento deve agendar a execução de uma &amp;ldquo;procedure: TProc&amp;rdquo; para após o fim do método que executou a chamada à função Defer(Proc: TProc).&lt;/p&gt;

&lt;p&gt;No final do método, o Defer deve executar todas as procedures empilhadas na ordem inversa ao agendamento.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34; target=&#34;_blank&#34;&gt;Defer de acordo com a documentação da Golang&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A declaração defer agenda a chamada da função (a função adiada) para ser executada imediatamente antes da função executando o defer retornar. É uma maneira incomum, mas eficiente de lidar com situações em que recursos devem ser liberados independentes do fluxo que a função executar até retornar. Os exemplos regulares são desbloquear um mutex ou fechar um arquivo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uma informação importante aqui, é que Golang é uma linguagem com garbage collection, então não é necessário destruir os objetos criados, apenas desalocar recursos.&lt;/p&gt;

&lt;p&gt;E independente do fluxo executado na função o Defer sempre deve executar os métodos já agendados, então se houver um Exit antes do final ou se ocorrer uma exceção, todos os métodos agendados devem ser executados.&lt;/p&gt;

&lt;p&gt;Nas minhas pesquisas, descobri que o Defer foi implementado para Swift da Apple, na versão 2.0. Você pode ler mais sobre isto neste artigo com um título legal, try/finally feito corretamente.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/new-syntax-swift-2-defer&#34; target=&#34;_blank&#34;&gt;The defer keyword in Swift 2: try/finally done right&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Também li em uma discussão no reddit que este recurso existe na linguagem D, mas não encontrei referências.&lt;/p&gt;

&lt;h3 id=&#34;outras-utilidades-para-o-defer&#34;&gt;Outras utilidades para o Defer&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fechar conexão com banco de dados, transação ou query&lt;/li&gt;
&lt;li&gt;Finalizar conexão de socket&lt;/li&gt;
&lt;li&gt;Fechar arquivos abertos&lt;/li&gt;
&lt;li&gt;Desbloquear critical section&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-implementação&#34;&gt;A Implementação&lt;/h2&gt;

&lt;p&gt;Após entender como o Defer dever funcionar, eu o implementei utilizando Interfaces, assim seria automaticamente desalocado quando sair de contexto, na instrução &amp;ldquo;end&amp;rdquo; do método que originou a chamada.&lt;/p&gt;

&lt;pre&gt;
  IDeferrer = Interface(IInterface)
    function Defer(Proc: TProc): IDeferrer;
  end;
&lt;/pre&gt;

&lt;p&gt;Eu segui o padrão adotado em Goland para nomear interfaces, adicionando o sufixo &amp;ldquo;er&amp;rdquo;. Este padrão difere do que normalmente encontramos em Delphi, que utiliza o sufixo &amp;ldquo;able&amp;rdquo;, assim teriamos &amp;ldquo;Deferrable&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Internamente, ele deve manter uma pilha com a lista de TProc agendadas, para que estes métodos sejam executados em ordem inversa quando o objeto TDefer for destruído, sem problemas pois Delphi tem uma implementação de TStack&amp;lt;T&amp;gt; em System.Generics.Collections, eu só tive de decorar o TProc com um record TStackItem antes de armazenar.&lt;/p&gt;

&lt;pre&gt;
type
  TDeferrer = class(TInterfacedObject, IDeferrer)
  strict private
    type
      TStackItem = record
        Proc: TProc;
      end;
  strict private
    FStack: TStack&lt; TStackItem &gt;;
    procedure Push(Proc: TProc);
    procedure ProcessStack;
  public
    constructor Create; overload;
    constructor Create(Proc: TProc); overload;
    destructor Destroy; override;
    function Defer(Proc: TProc): IDeferrer;
  end;
&lt;/pre&gt;

&lt;p&gt;E para finalizar, criei uma função global que retorna a instância criada já armazenando o primeiro método:&lt;/p&gt;

&lt;pre&gt;
function Defer(Proc: TProc): IDeferrer;
begin
  Result := TDeferrer.Create(Proc);
end;
&lt;/pre&gt;

&lt;h2 id=&#34;como-usar&#34;&gt;Como usar&lt;/h2&gt;

&lt;p&gt;O objetivo do Defer é adiar métodos, não gerenciar o tempo de vida de objetos, mas como em Delphi Win32/Win64 os objetos são gerenciados manualmente, podemos utilizar o Defer para destruir os objetos, além de finalizar outros recursos.&lt;/p&gt;

&lt;pre&gt;
uses
  Foundation.System;
var
  Database: TDatabase;
  Exec: IDeferrer;
  Query: TQuery;
  Transaction: TTransaction;
begin
  Database := TDatabase.Create(FWriter);
  Exec := Defer(Database.Free);

  Database.Open(&#39;foundation-db&#39;);
  Exec.Defer(Database.Close);
  
  Transaction := Database.StartTransaction;
  Exec.Defer(Transaction.Free);
  Exec.Defer(Transaction.Commit);
  
  Query := Transaction.Query;
  Exec.Defer(Query.Free);
  
  if Query.Open(&#39;select value from table&#39;) then
  begin
    Exec.Defer(Query.Close);
  end;
end;
&lt;/pre&gt; 

&lt;p&gt;Este código é parte dos testes unitários, os objetos são apenas Mock, o objeto FWriter passado no construtor é utilizado para gravar as etapas para poder verificar o resultado, esta foi a forma que encontrei para testar o Defer, pois ele só executará os métodos quando estiver sendo destruído.&lt;/p&gt;

&lt;p&gt;Este é o log do do teste unitário usado para verificar o resultado:&lt;/p&gt;

&lt;pre&gt;
  TDatabase.Open(&#39;foundation-db&#39;)
  TDatabase.StartTransaction
  TTransaction.Query
  TQuery.Create
  TQuery.Open(&#39;select value from table&#39;)

// A Execução do Defer inicia aqui

  TQuery.Close 
  TQuery.Free
  TTransaction.Commit
  TTransaction.Free
  TDatabase.Close
  TDatabase.Free
&lt;/pre&gt; 

&lt;p&gt;Note que o Defer acontece apenas depois de TQuery.Open, exatamente na ordem inversa em que os métodos foram agendados.&lt;/p&gt;

&lt;p&gt;Outro detalhe é a declaração da variável &amp;ldquo;Exec: IDeferrer&amp;rdquo; para reutilizar a mesma instância. Declarando uma variável e reutilizando nas próximas chamadas somente uma instância é alocada, algo que pode ser dispensado para o benefício de ter o código mais limpo com uma pequena sobrecarga.&lt;/p&gt;

&lt;p&gt;Se a referência do IDeferrer não for armazenada em uma variável local, uma nova instância será criada a cada chamada ao Defer. Seria um problema se a ordem em que as instâncias são desalocadas não fosse a mesma do Defer, mas o comportamento foi consistente em todos os testes. Acredito ser o comportamento padrão do gerenciador de memória do Delphi, o &lt;a href=&#34;https://github.com/pleriche/FastMM4&#34; target=&#34;_blank&#34;&gt;FastMM&lt;/a&gt;, armazenar as instâncias alocadas em uma pilha, desta forma a ordem para desalocar é a mesma da implementação do Defer. Se o gerenciador de memória do seu projeto for outro como &lt;a href=&#34;https://github.com/andremussche/scalemm/tree/version2&#34; target=&#34;_blank&#34;&gt;ScaleMM&lt;/a&gt; ou &lt;a href=&#34;https://www.nexusdb.com/support/index.php?q=node/522&#34; target=&#34;_blank&#34;&gt;Nexus Memory Manager&lt;/a&gt; sugiro fazer testes antes de usar o Defer, embora eu acredito que este seja o comportamento padrão para a desalocação de recursos.&lt;/p&gt;

&lt;h3 id=&#34;uma-implementação-alternativa&#34;&gt;Uma implementação alternativa&lt;/h3&gt;

&lt;p&gt;Na pasta Experimental do repositório tem uma implementação alternativa que estende o Defer na unit &lt;a href=&#34;https://github.com/cesarliws/foundation-4-delphi/blob/master/Experimental/Foundation.Pattern.Defer.Auto.pas&#34; target=&#34;_blank&#34;&gt;Foundation.Pattern.Defer.Auto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esta implementação captura a Thread e o ponteiro do método que chamou o Defer e as utiliza como chave para salvar a instância do Defer em um TDictionary&amp;lt;string, IDeferrer&amp;gt; para reutilizar sempre a mesma instância. Funcionou em todos os testes executados em win32, win64, single e multi thread.&lt;/p&gt;

&lt;p&gt;Para capturar o ponteiro do método que iniciou a chamada utilizei a unit &lt;a href=&#34;https://github.com/project-jedi/jcl/blob/master/jcl/source/windows/JclDebug.pas&#34; target=&#34;_blank&#34;&gt;JclDebug&lt;/a&gt; do projeto Jedi Jcl. Para win32 foi possível extrair o código necessário e colocar na unit &lt;a href=&#34;https://github.com/cesarliws/foundation-4-delphi/blob/master/Experimental/Foundation.Vendor.JclDebug.pas&#34; target=&#34;_blank&#34;&gt;Foundation.Vendor.JclDebug&lt;/a&gt;, com os devidos créditos e licença do autor, dispensando a necessidade de instalar a Jcl completa no ambiente de testes. Para win64 é necessário utilizar a unit JclDebug, também recomendada para ambiente de produção.&lt;/p&gt;

&lt;p&gt;A vantagem é clara, apenas uma instância de Defer é criada para cada método, por outro lado a sobrecarga gerada pela implementação da lista com TDictionary, o mutex necessário para garantir o bom comportamento em multi thread e a dependência da Jcl, são maiores do que declarar uma variável ou ter mais de uma instância por método de origem. Tendo em mente que em uma aplicação, normalmente não haverá muitas instâncias ao mesmo tempo.&lt;/p&gt;

&lt;h3 id=&#34;mais-exemplos&#34;&gt;Mais exemplos&lt;/h3&gt;

&lt;h4 id=&#34;métodos-anônimos&#34;&gt;Métodos Anônimos&lt;/h4&gt;

&lt;pre&gt;
  Database := TDatabase.Create(FWriter);
  Database.Open(&#39;database-name&#39;);
  Defer(
    procedure
    begin
      Database.Close;
      Database.Free;
    end
  );
&lt;/pre&gt; 

&lt;h4 id=&#34;criar-log-com-um-tracer&#34;&gt;Criar log com um tracer&lt;/h4&gt;

&lt;pre&gt;
class function TTrace.Method(Writer: TStringsWriter; const MethodName: string; var TraceProc: ITracer): IDeferrer;
var
  {! Workaround &#34;Defer(ITracer.Exit)&#34; : E2010 Incompatible types: &#39;TProc&#39; and &#39;procedure, untyped pointer or untyped parameter&#39; }
  Trace: TTrace;
begin
  Trace := TTrace.Create(Writer);
  Trace.Enter(MethodName);
  Result := Defer(Trace.Exit);
  Supports(Trace, ITracer, TraceProc)
end;

var
  Trace: ITracer;
begin
  TTrace.Method(FWriter, &#39;DelegateDeferToTraceExecute&#39;, Trace);
  Trace.Step(&#39;First&#39;);
  Trace.Step(&#39;Second&#39;);
  Trace.Step(&#39;Third&#39;);
end;
&lt;/pre&gt; 

&lt;p&gt;Que gerou o log:&lt;/p&gt;

&lt;pre&gt;
    &gt; Enter DelegateDeferToTraceExecute
        1. DelegateDeferToTraceExecute: First
        2. DelegateDeferToTraceExecute: Second
        3. DelegateDeferToTraceExecute: Third
    &lt; Exit DelegateDeferToTraceExecute
&lt;/pre&gt; 

&lt;h4 id=&#34;finalização-condicional-com-método-anonimos&#34;&gt;Finalização condicional com método anonimos&lt;/h4&gt;

&lt;pre&gt;
Defer(
  procedure(
    if Datatabase.InTransaction then
    begin
      if Object.IsValid then
          Datatabase.Commit
      else
          Datatabase.RollBack;
    end;
  )
);
&lt;/pre&gt; 

&lt;h4 id=&#34;manipulando-excessões&#34;&gt;Manipulando excessões&lt;/h4&gt;

&lt;pre&gt;
Defer(
  procedure(
    try
      Connection.Close;
    except 
      on E: Exception do
        Log.Write(E); 
    end;

    Connection.Free;
  )
);
&lt;/pre&gt; 
  

&lt;h4 id=&#34;utilizando-o-defer-como-destructor-para-o-record&#34;&gt;Utilizando o Defer como destructor para o record&lt;/h4&gt;

&lt;pre&gt;
type
  TValueType&lt; T &gt; = record
  private
    FAnyObject: TAnyObject;
    FDeferrer: IDeferrer;
    FValue: T;
  public
    constructor Create(Value: T);
  end;  

constructor TValueType&lt; T &gt;.Create(Value: T);
begin
  FValue := Value;
  FAnyObject := TAnyObject.Create
  FDeferrer  := Defer(FAnyObject.Free);
end;
&lt;/pre&gt; 

&lt;h2 id=&#34;vantagens&#34;&gt;Vantagens&lt;/h2&gt;

&lt;p&gt;Adiar a execução de procedures tem algumas vantagens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Garante que você não vai esquecer de finalizar um recurso,
um erro bem comum quando é feito a manutenção do código e novas condições
são adicionadas, criando um novo fluxo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;O código de finalização fica junto ao de inicialização, que é
mais legível do que colocar no fim do método;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dispensa a necessidade de blocos try/finally para garantir que um
recurso seja finalizado.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mesmo que ocorra uma excessão, todos os métodos agendados no Defer
serão executados.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ressalvas&#34;&gt;Ressalvas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;O defer adiciona uma pequena sobrecarga, pois um objeto é criado e a sua finalização irá acumular a execução das procedures, código que seria executado de qualquer forma. Mas eu considero que se não se tratar de um código de alta performance, a utilização traz mais vantagens que desvantagens.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Evite usar defer dentro de loops, se for necessário alocar e desalocar recursos dentro de um loop, a desalocação deve ser determinística. O uso excessivo pode aumentar muito o consumo de memória e causar lentidão.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ao usar com métodos anônimos tenha em mente que o estado é capturado, qualquer variável utilizada, terá o valor capturado no momento em que
o defer for declarado e não o valor alterado durante o fluxo da procedure. Leia mais em &lt;a href=&#34;https://community.embarcadero.com/blogs/entry/understanding-anonymous-methods-37828&#34; target=&#34;_blank&#34;&gt;Understanding Anonymous Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Este projeto foi inspirado na function &lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34; target=&#34;_blank&#34;&gt;Defer&lt;/a&gt; da &lt;a href=&#34;https://golang.org&#34; target=&#34;_blank&#34;&gt;Golang&lt;/a&gt; e não tem relação com os padrões &amp;ldquo;Deferred/Promise&amp;rdquo; e &amp;ldquo;Deferred Choice&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;repositório&#34;&gt;Repositório&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cesarliws/foundation-4-delphi&#34; target=&#34;_blank&#34;&gt;Foundation 4 Delphi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O projeto está hospedado no github, eu farei outro post apenas para falar do framework e sobre o que estou preparando para ele. Muita coisa está pronta e em produção, então aguardem notícias em breve.&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>
