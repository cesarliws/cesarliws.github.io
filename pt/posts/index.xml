<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>

    <title>@cesarliws’s cook bytes - Posts</title>
    <link>https://cesarliws.github.io/pt/posts/index.xml</link>
    <description>All entries in Posts on cook bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    
    <copyright>Everything is mine</copyright>
    <lastBuildDate>Wed, 05 Apr 2017 17:02:27 -0300</lastBuildDate>
    <atom:link href="/pt/posts/index.xml" rel="self" type="application/rss+xml" />
    
      
      <item>
        <title>Delphi Defer</title>
        <link>https://cesarliws.github.io/pt/posts/delphi-defer/</link>
        <pubDate>Wed, 05 Apr 2017 17:02:27 -0300</pubDate>
        <author> (Cesar Romero)</author>
        <guid>https://cesarliws.github.io/pt/posts/delphi-defer/</guid>
        <description>

&lt;h1 id=&#34;draft&#34;&gt;Draft&lt;/h1&gt;

&lt;h2 id=&#34;origem&#34;&gt;Origem&lt;/h2&gt;

&lt;p&gt;Na semana passada eu estava refatorando um código do framework &amp;ldquo;Foundation 4 Delphi&amp;rdquo;, pois precisava extender o TComponent.TRecursiveEnumerator para utilizar em outras classes, era uma implementação antiga e resolvi reescrever com generics e aproveitar a vantagem dos smart records para simplificar a integração com o meu TComponentHelper class helper.&lt;/p&gt;

&lt;p&gt;Na implementação do record, precisei criar um field &amp;ldquo;IInterface&amp;rdquo; simplemente para poder simular um destructor no record, foi quando eu pensei como seria bom se tivessemos o &lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34;&gt;Defer&lt;/a&gt; do Golang. Quando estava escrevendo os testes unitários, novamente senti a necessidade do Defer, foi quando decidi pensar mais no padrão e comportamento do Defer, o que me levou a tentar implementar em Delphi, apenas para um exercício de lógica, mesmo inicialmente achando que não seria algo útil para produção, mas para a minha surpresa, consegui algo muito útil.&lt;/p&gt;

&lt;h2 id=&#34;o-conceito&#34;&gt;O Conceito&lt;/h2&gt;

&lt;p&gt;Defer define o padrão &amp;ldquo;adiar a execução de uma procedure&amp;rdquo;, este adiamento deve agendar a execução de uma &amp;ldquo;procedure TProc&amp;rdquo; para após o fim do método que executou a chamada ao Defer(Procedure: TProc).&lt;/p&gt;

&lt;p&gt;No final do método o Defer deve executar todas as procedures empilhadas na ordem inversa ao agendamento.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#defer&#34;&gt;Defer de acordo com a documentação da Golang&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A declaração defer agenda a chamada da função (a função adiada) para ser executada imediatamente antes da função executando o defer retornar. É uma maneira incomum, mas eficiente de lidar com situações em que recursos devem ser liberados independentes do fluxo que a função executar até retornar. Os exemplos regulares são desbloquear um mutex ou fechar um arquivo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uma informação importante aqui, é que Golang é uma linguagem com garbage collection, então não é necessário destruir os objetos criados, apenas desalocar recursos.&lt;/p&gt;

&lt;p&gt;E independente do fluxo executado na função o Defer sempre deve executar os métodos já agendados, então se houver um Exit antes do final ou se ocorrer uma exceção, todos os métodos agendados devem ser executados.&lt;/p&gt;

&lt;p&gt;Outros exemplos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fechar conexão com banco de dados&lt;/li&gt;
&lt;li&gt;Finalizar Transação com banco de dados&lt;/li&gt;
&lt;li&gt;Finalizar conexão de socket&lt;/li&gt;
&lt;li&gt;Fechars arquivos&lt;/li&gt;
&lt;li&gt;Desbloquear um Critical Section&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-implementação&#34;&gt;A Implementação&lt;/h2&gt;

&lt;p&gt;Após analisar o comportamento e entender como o Defer dever funcionar, comecei a implementar utilizando Interfaces, assim ela seria automaticamente desalocada quando a Interface sair de contexto, esta foi fácil.&lt;/p&gt;
  IDeferrer = Interface(IInterface)
    function Defer(Proc: TProc): IDeferrer;
  end;

&lt;p&gt;Seguindo o padrão adotado em Golang para nomear Interface, adicionei o sufixo &amp;ldquo;er&amp;rdquo; e fiz o ajuste para ficar de acordo gramaticalmente.&lt;/p&gt;

&lt;p&gt;Internamente, ele deve manter uma pilha com a lista de TProc agendadas, assim estes métodos podem ser executados em ordem inversa quando o objeto TDefer for destruído, sem problemas pois Delphi tem uma implementação de TStack&lt;T&gt; em System.Generics.Collections, mas aqui teve um truque, pois na hora de tirar o TProc da pilha, estava tendo alguns problemas que resolvi decorando o TProc com um record antes de armazenar.&lt;/p&gt;
  TDeferrer = class(TInterfacedObject, IDeferrer)
  strict private
    type
      TStackItem = record
        Proc: TProc;
      end;
  strict private
    FStack: TStack&lt;TStackItem&gt;;
    procedure Push(Proc: TProc);
    procedure ProcessStack;
  public
    constructor Create; overload;
    constructor Create(Proc: TProc); overload;
    destructor Destroy; override;

    function Defer(Proc: TProc): IDeferrer;
  end;

&lt;h2 id=&#34;vantagens&#34;&gt;Vantagens&lt;/h2&gt;

&lt;p&gt;Adiar a execução de procedures tem algumas vantagens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Garante que você não vai esquecer de finalizar/fechar um recurso,
um erro bem comum quando é feito a manutenção do código e novas condições
são adicionadas, criando um novo caminho para o fluxo da procedure;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;O código de finalização fica junto ao de inicialização, que é
mais legível do que colocar no fim do método;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dispensa a necessidade de blocos try/finally para garantir que um
recurso seja finalizado.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mesmo que ocorra uma Exception, todos os métodos agendados no defer
serão executados.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exemplos da sua utilização são desbloquear um CriticalSection, fechar um
arquivo ou fechar uma conexão com o banco de dados.&lt;/p&gt;

&lt;p&gt;Evite usar defer dentro de loops, isso pode causar um aumento excessivo
de memória se muitos objetos forem alocados, podendo ocasionar o erro
&amp;ldquo;Out of memory&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ao usar com métodos anonimos tenha em mente que o estado é capturado,
qualquer variável utilizada, terá o valor capturado no momento em que
o defer for declarado e não o valor alterado durante o fluxo da
procedure.&lt;/p&gt;

&lt;p&gt;Esta padrão é baseado na function Defer em #Golang e não tem relação
aos padrões &amp;ldquo;Deferred/Promise&amp;rdquo; e &amp;ldquo;Deferred Choice&amp;rdquo;.&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>
